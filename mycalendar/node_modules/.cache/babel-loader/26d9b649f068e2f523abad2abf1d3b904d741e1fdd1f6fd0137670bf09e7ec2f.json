{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst PATH_QUERY_FRAGMENT_REGEXP = /^(#?(?:\\0.|[^?#\\0])*)(\\?(?:\\0.|[^#\\0])*)?(#.*)?$/;\nconst ZERO_ESCAPE_REGEXP = /\\0(.)/g;\n\n/**\n * @param {string} identifier identifier\n * @returns {[string, string, string]|null} parsed identifier\n */\nfunction parseIdentifier(identifier) {\n  if (!identifier) {\n    return null;\n  }\n  const firstEscape = identifier.indexOf(\"\\0\");\n  if (firstEscape < 0) {\n    // Fast path for inputs that don't use \\0 escaping.\n    const queryStart = identifier.indexOf(\"?\");\n    // Start at index 1 to ignore a possible leading hash.\n    const fragmentStart = identifier.indexOf(\"#\", 1);\n    if (fragmentStart < 0) {\n      if (queryStart < 0) {\n        // No fragment, no query\n        return [identifier, \"\", \"\"];\n      }\n      // Query, no fragment\n      return [identifier.slice(0, queryStart), identifier.slice(queryStart), \"\"];\n    }\n    if (queryStart < 0 || fragmentStart < queryStart) {\n      // Fragment, no query\n      return [identifier.slice(0, fragmentStart), \"\", identifier.slice(fragmentStart)];\n    }\n\n    // Query and fragment\n    return [identifier.slice(0, queryStart), identifier.slice(queryStart, fragmentStart), identifier.slice(fragmentStart)];\n  }\n  const match = PATH_QUERY_FRAGMENT_REGEXP.exec(identifier);\n  if (!match) return null;\n  return [match[1].replace(ZERO_ESCAPE_REGEXP, \"$1\"), match[2] ? match[2].replace(ZERO_ESCAPE_REGEXP, \"$1\") : \"\", match[3] || \"\"];\n}\nmodule.exports.parseIdentifier = parseIdentifier;","map":{"version":3,"names":["PATH_QUERY_FRAGMENT_REGEXP","ZERO_ESCAPE_REGEXP","parseIdentifier","identifier","firstEscape","indexOf","queryStart","fragmentStart","slice","match","exec","replace","module","exports"],"sources":["C:/Users/dah03/calendar/mycalendar/node_modules/enhanced-resolve/lib/util/identifier.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Ivan Kopeykin @vankop\n*/\n\n\"use strict\";\n\nconst PATH_QUERY_FRAGMENT_REGEXP =\n\t/^(#?(?:\\0.|[^?#\\0])*)(\\?(?:\\0.|[^#\\0])*)?(#.*)?$/;\nconst ZERO_ESCAPE_REGEXP = /\\0(.)/g;\n\n/**\n * @param {string} identifier identifier\n * @returns {[string, string, string]|null} parsed identifier\n */\nfunction parseIdentifier(identifier) {\n\tif (!identifier) {\n\t\treturn null;\n\t}\n\n\tconst firstEscape = identifier.indexOf(\"\\0\");\n\tif (firstEscape < 0) {\n\t\t// Fast path for inputs that don't use \\0 escaping.\n\t\tconst queryStart = identifier.indexOf(\"?\");\n\t\t// Start at index 1 to ignore a possible leading hash.\n\t\tconst fragmentStart = identifier.indexOf(\"#\", 1);\n\n\t\tif (fragmentStart < 0) {\n\t\t\tif (queryStart < 0) {\n\t\t\t\t// No fragment, no query\n\t\t\t\treturn [identifier, \"\", \"\"];\n\t\t\t}\n\t\t\t// Query, no fragment\n\t\t\treturn [\n\t\t\t\tidentifier.slice(0, queryStart),\n\t\t\t\tidentifier.slice(queryStart),\n\t\t\t\t\"\",\n\t\t\t];\n\t\t}\n\n\t\tif (queryStart < 0 || fragmentStart < queryStart) {\n\t\t\t// Fragment, no query\n\t\t\treturn [\n\t\t\t\tidentifier.slice(0, fragmentStart),\n\t\t\t\t\"\",\n\t\t\t\tidentifier.slice(fragmentStart),\n\t\t\t];\n\t\t}\n\n\t\t// Query and fragment\n\t\treturn [\n\t\t\tidentifier.slice(0, queryStart),\n\t\t\tidentifier.slice(queryStart, fragmentStart),\n\t\t\tidentifier.slice(fragmentStart),\n\t\t];\n\t}\n\n\tconst match = PATH_QUERY_FRAGMENT_REGEXP.exec(identifier);\n\n\tif (!match) return null;\n\n\treturn [\n\t\tmatch[1].replace(ZERO_ESCAPE_REGEXP, \"$1\"),\n\t\tmatch[2] ? match[2].replace(ZERO_ESCAPE_REGEXP, \"$1\") : \"\",\n\t\tmatch[3] || \"\",\n\t];\n}\n\nmodule.exports.parseIdentifier = parseIdentifier;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,0BAA0B,GAC/B,kDAAkD;AACnD,MAAMC,kBAAkB,GAAG,QAAQ;;AAEnC;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACC,UAAU,EAAE;EACpC,IAAI,CAACA,UAAU,EAAE;IAChB,OAAO,IAAI;EACZ;EAEA,MAAMC,WAAW,GAAGD,UAAU,CAACE,OAAO,CAAC,IAAI,CAAC;EAC5C,IAAID,WAAW,GAAG,CAAC,EAAE;IACpB;IACA,MAAME,UAAU,GAAGH,UAAU,CAACE,OAAO,CAAC,GAAG,CAAC;IAC1C;IACA,MAAME,aAAa,GAAGJ,UAAU,CAACE,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC;IAEhD,IAAIE,aAAa,GAAG,CAAC,EAAE;MACtB,IAAID,UAAU,GAAG,CAAC,EAAE;QACnB;QACA,OAAO,CAACH,UAAU,EAAE,EAAE,EAAE,EAAE,CAAC;MAC5B;MACA;MACA,OAAO,CACNA,UAAU,CAACK,KAAK,CAAC,CAAC,EAAEF,UAAU,CAAC,EAC/BH,UAAU,CAACK,KAAK,CAACF,UAAU,CAAC,EAC5B,EAAE,CACF;IACF;IAEA,IAAIA,UAAU,GAAG,CAAC,IAAIC,aAAa,GAAGD,UAAU,EAAE;MACjD;MACA,OAAO,CACNH,UAAU,CAACK,KAAK,CAAC,CAAC,EAAED,aAAa,CAAC,EAClC,EAAE,EACFJ,UAAU,CAACK,KAAK,CAACD,aAAa,CAAC,CAC/B;IACF;;IAEA;IACA,OAAO,CACNJ,UAAU,CAACK,KAAK,CAAC,CAAC,EAAEF,UAAU,CAAC,EAC/BH,UAAU,CAACK,KAAK,CAACF,UAAU,EAAEC,aAAa,CAAC,EAC3CJ,UAAU,CAACK,KAAK,CAACD,aAAa,CAAC,CAC/B;EACF;EAEA,MAAME,KAAK,GAAGT,0BAA0B,CAACU,IAAI,CAACP,UAAU,CAAC;EAEzD,IAAI,CAACM,KAAK,EAAE,OAAO,IAAI;EAEvB,OAAO,CACNA,KAAK,CAAC,CAAC,CAAC,CAACE,OAAO,CAACV,kBAAkB,EAAE,IAAI,CAAC,EAC1CQ,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK,CAAC,CAAC,CAAC,CAACE,OAAO,CAACV,kBAAkB,EAAE,IAAI,CAAC,GAAG,EAAE,EAC1DQ,KAAK,CAAC,CAAC,CAAC,IAAI,EAAE,CACd;AACF;AAEAG,MAAM,CAACC,OAAO,CAACX,eAAe,GAAGA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}