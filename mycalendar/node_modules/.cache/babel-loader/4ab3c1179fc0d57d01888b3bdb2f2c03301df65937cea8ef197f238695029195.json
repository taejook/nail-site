{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dah03\\\\calendar\\\\mycalendar\\\\src\\\\components\\\\Calendar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Fullcalendar from \"@fullcalendar/react\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Calendar() {\n  _s();\n  const [events, setEvents] = useState([]);\n\n  // Fetch bookings from backend\n  useEffect(() => {\n    fetch(\"/api/bookings\").then(res => res.json()).then(data => {\n      if (data.bookings) {\n        const mapped = data.bookings.map(b => {\n          var _b$customer;\n          return {\n            id: b.id,\n            title: ((_b$customer = b.customer) === null || _b$customer === void 0 ? void 0 : _b$customer.display_name) || \"Booking\",\n            start: b.start_at,\n            end: b.end_at\n          };\n        });\n        setEvents(mapped);\n      }\n    });\n  }, []);\n\n  // Handle slot selection → create booking\n  const handleDateSelect = selectInfo => {\n    const customerId = prompt(\"Enter Customer ID to book for:\");\n    if (!customerId) return;\n    fetch(\":4000/api/bookings\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        start_at: selectInfo.startStr,\n        end_at: selectInfo.endStr,\n        customer_id: customerId,\n        location_id: \"YOUR_LOCATION_ID\" // from Square dashboard\n      })\n    }).then(res => res.json()).then(newBooking => {\n      console.log(\"Created booking:\", newBooking);\n      setEvents(prev => {\n        var _newBooking$booking$c;\n        return [...prev, {\n          id: newBooking.booking.id,\n          title: ((_newBooking$booking$c = newBooking.booking.customer) === null || _newBooking$booking$c === void 0 ? void 0 : _newBooking$booking$c.display_name) || \"Booking\",\n          start: newBooking.booking.start_at,\n          end: newBooking.booking.end_at\n        }];\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: \"20px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Fullcalendar, {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      initialView: \"timeGridWeek\",\n      selectable: true,\n      events: events,\n      select: handleDateSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(Calendar, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n_c = Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","useEffect","Fullcalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","jsxDEV","_jsxDEV","Calendar","_s","events","setEvents","fetch","then","res","json","data","bookings","mapped","map","b","_b$customer","id","title","customer","display_name","start","start_at","end","end_at","handleDateSelect","selectInfo","customerId","prompt","method","headers","body","JSON","stringify","startStr","endStr","customer_id","location_id","newBooking","console","log","prev","_newBooking$booking$c","booking","style","padding","children","plugins","initialView","selectable","select","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dah03/calendar/mycalendar/src/components/Calendar.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Fullcalendar from \"@fullcalendar/react\";\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\nexport default function Calendar() {\r\n  const [events, setEvents] = useState([]);\r\n\r\n  // Fetch bookings from backend\r\n  useEffect(() => {\r\n    fetch(\"/api/bookings\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        if (data.bookings) {\r\n          const mapped = data.bookings.map(b => ({\r\n            id: b.id,\r\n            title: b.customer?.display_name || \"Booking\",\r\n            start: b.start_at,\r\n            end: b.end_at,\r\n          }));\r\n          setEvents(mapped);\r\n        }\r\n      });\r\n  }, []);\r\n\r\n  // Handle slot selection → create booking\r\n  const handleDateSelect = (selectInfo) => {\r\n    const customerId = prompt(\"Enter Customer ID to book for:\");\r\n    if (!customerId) return;\r\n\r\n    fetch(\":4000/api/bookings\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({\r\n        start_at: selectInfo.startStr,\r\n        end_at: selectInfo.endStr,\r\n        customer_id: customerId,\r\n        location_id: \"YOUR_LOCATION_ID\", // from Square dashboard\r\n      }),\r\n    })\r\n      .then(res => res.json())\r\n      .then(newBooking => {\r\n        console.log(\"Created booking:\", newBooking);\r\n        setEvents((prev) => [\r\n          ...prev,\r\n          {\r\n            id: newBooking.booking.id,\r\n            title: newBooking.booking.customer?.display_name || \"Booking\",\r\n            start: newBooking.booking.start_at,\r\n            end: newBooking.booking.end_at,\r\n          },\r\n        ]);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: \"20px\" }}>\r\n      <Fullcalendar\r\n        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n        initialView=\"timeGridWeek\"\r\n        selectable={true}\r\n        events={events}\r\n        select={handleDateSelect}\r\n      />\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}