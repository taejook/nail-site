{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst getPaths = require(\"./getPaths\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class ModulesInHierarchicalDirectoriesPlugin {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | Array<string>} directories directories\n   * @param {string | ResolveStepHook} target target\n   */\n  constructor(source, directories, target) {\n    this.source = source;\n    this.directories = /** @type {Array<string>} */[...directories];\n    this.target = target;\n  }\n\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"ModulesInHierarchicalDirectoriesPlugin\", (request, resolveContext, callback) => {\n      const fs = resolver.fileSystem;\n      const addrs = getPaths(/** @type {string} */request.path).paths.map(path => this.directories.map(directory => resolver.join(path, directory))).reduce((array, path) => {\n        array.push(...path);\n        return array;\n      }, []);\n      forEachBail(addrs,\n      /**\n       * @param {string} addr addr\n       * @param {(err?: null|Error, result?: null|ResolveRequest) => void} callback callback\n       * @returns {void}\n       */\n      (addr, callback) => {\n        fs.stat(addr, (err, stat) => {\n          if (!err && stat && stat.isDirectory()) {\n            /** @type {ResolveRequest} */\n            const obj = {\n              ...request,\n              path: addr,\n              request: `./${request.request}`,\n              module: false\n            };\n            const message = `looking for modules in ${addr}`;\n            return resolver.doResolve(target, obj, message, resolveContext, callback);\n          }\n          if (resolveContext.log) {\n            resolveContext.log(`${addr} doesn't exist or is not a directory`);\n          }\n          if (resolveContext.missingDependencies) {\n            resolveContext.missingDependencies.add(addr);\n          }\n          return callback();\n        });\n      }, callback);\n    });\n  }\n};","map":{"version":3,"names":["forEachBail","require","getPaths","module","exports","ModulesInHierarchicalDirectoriesPlugin","constructor","source","directories","target","apply","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","fs","fileSystem","addrs","path","paths","map","directory","join","reduce","array","push","addr","stat","err","isDirectory","obj","message","doResolve","log","missingDependencies","add"],"sources":["C:/Users/dah03/calendar/mycalendar/node_modules/enhanced-resolve/lib/ModulesInHierarchicalDirectoriesPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst getPaths = require(\"./getPaths\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class ModulesInHierarchicalDirectoriesPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | Array<string>} directories directories\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, directories, target) {\n\t\tthis.source = source;\n\t\tthis.directories = /** @type {Array<string>} */ [...directories];\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\n\t\t\t\t\"ModulesInHierarchicalDirectoriesPlugin\",\n\t\t\t\t(request, resolveContext, callback) => {\n\t\t\t\t\tconst fs = resolver.fileSystem;\n\t\t\t\t\tconst addrs = getPaths(/** @type {string} */ (request.path))\n\t\t\t\t\t\t.paths.map((path) =>\n\t\t\t\t\t\t\tthis.directories.map((directory) =>\n\t\t\t\t\t\t\t\tresolver.join(path, directory),\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.reduce((array, path) => {\n\t\t\t\t\t\t\tarray.push(...path);\n\t\t\t\t\t\t\treturn array;\n\t\t\t\t\t\t}, []);\n\t\t\t\t\tforEachBail(\n\t\t\t\t\t\taddrs,\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @param {string} addr addr\n\t\t\t\t\t\t * @param {(err?: null|Error, result?: null|ResolveRequest) => void} callback callback\n\t\t\t\t\t\t * @returns {void}\n\t\t\t\t\t\t */\n\t\t\t\t\t\t(addr, callback) => {\n\t\t\t\t\t\t\tfs.stat(addr, (err, stat) => {\n\t\t\t\t\t\t\t\tif (!err && stat && stat.isDirectory()) {\n\t\t\t\t\t\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\t\t\tpath: addr,\n\t\t\t\t\t\t\t\t\t\trequest: `./${request.request}`,\n\t\t\t\t\t\t\t\t\t\tmodule: false,\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tconst message = `looking for modules in ${addr}`;\n\t\t\t\t\t\t\t\t\treturn resolver.doResolve(\n\t\t\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\t\tmessage,\n\t\t\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\t\t\tcallback,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (resolveContext.log) {\n\t\t\t\t\t\t\t\t\tresolveContext.log(\n\t\t\t\t\t\t\t\t\t\t`${addr} doesn't exist or is not a directory`,\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (resolveContext.missingDependencies) {\n\t\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(addr);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcallback,\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t);\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAC5C,MAAMC,QAAQ,GAAGD,OAAO,CAAC,YAAY,CAAC;;AAEtC;AACA;AACA;;AAEAE,MAAM,CAACC,OAAO,GAAG,MAAMC,sCAAsC,CAAC;EAC7D;AACD;AACA;AACA;AACA;EACCC,WAAWA,CAACC,MAAM,EAAEC,WAAW,EAAEC,MAAM,EAAE;IACxC,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,WAAW,GAAG,4BAA6B,CAAC,GAAGA,WAAW,CAAC;IAChE,IAAI,CAACC,MAAM,GAAGA,MAAM;EACrB;;EAEA;AACD;AACA;AACA;EACCC,KAAKA,CAACC,QAAQ,EAAE;IACf,MAAMF,MAAM,GAAGE,QAAQ,CAACC,UAAU,CAAC,IAAI,CAACH,MAAM,CAAC;IAC/CE,QAAQ,CACNE,OAAO,CAAC,IAAI,CAACN,MAAM,CAAC,CACpBO,QAAQ,CACR,wCAAwC,EACxC,CAACC,OAAO,EAAEC,cAAc,EAAEC,QAAQ,KAAK;MACtC,MAAMC,EAAE,GAAGP,QAAQ,CAACQ,UAAU;MAC9B,MAAMC,KAAK,GAAGlB,QAAQ,CAAC,qBAAuBa,OAAO,CAACM,IAAK,CAAC,CAC1DC,KAAK,CAACC,GAAG,CAAEF,IAAI,IACf,IAAI,CAACb,WAAW,CAACe,GAAG,CAAEC,SAAS,IAC9Bb,QAAQ,CAACc,IAAI,CAACJ,IAAI,EAAEG,SAAS,CAC9B,CACD,CAAC,CACAE,MAAM,CAAC,CAACC,KAAK,EAAEN,IAAI,KAAK;QACxBM,KAAK,CAACC,IAAI,CAAC,GAAGP,IAAI,CAAC;QACnB,OAAOM,KAAK;MACb,CAAC,EAAE,EAAE,CAAC;MACP3B,WAAW,CACVoB,KAAK;MACL;AACN;AACA;AACA;AACA;MACM,CAACS,IAAI,EAAEZ,QAAQ,KAAK;QACnBC,EAAE,CAACY,IAAI,CAACD,IAAI,EAAE,CAACE,GAAG,EAAED,IAAI,KAAK;UAC5B,IAAI,CAACC,GAAG,IAAID,IAAI,IAAIA,IAAI,CAACE,WAAW,CAAC,CAAC,EAAE;YACvC;YACA,MAAMC,GAAG,GAAG;cACX,GAAGlB,OAAO;cACVM,IAAI,EAAEQ,IAAI;cACVd,OAAO,EAAE,KAAKA,OAAO,CAACA,OAAO,EAAE;cAC/BZ,MAAM,EAAE;YACT,CAAC;YACD,MAAM+B,OAAO,GAAG,0BAA0BL,IAAI,EAAE;YAChD,OAAOlB,QAAQ,CAACwB,SAAS,CACxB1B,MAAM,EACNwB,GAAG,EACHC,OAAO,EACPlB,cAAc,EACdC,QACD,CAAC;UACF;UACA,IAAID,cAAc,CAACoB,GAAG,EAAE;YACvBpB,cAAc,CAACoB,GAAG,CACjB,GAAGP,IAAI,sCACR,CAAC;UACF;UACA,IAAIb,cAAc,CAACqB,mBAAmB,EAAE;YACvCrB,cAAc,CAACqB,mBAAmB,CAACC,GAAG,CAACT,IAAI,CAAC;UAC7C;UACA,OAAOZ,QAAQ,CAAC,CAAC;QAClB,CAAC,CAAC;MACH,CAAC,EACDA,QACD,CAAC;IACF,CACD,CAAC;EACH;AACD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}