{"ast":null,"code":"/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n  return sourceMap.sections != null ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL) : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\nSourceMapConsumer.fromSourceMap = function (aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n};\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n    return this.__generatedMappings;\n  }\n});\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n    return this.__originalMappings;\n  }\n});\nSourceMapConsumer.prototype._charIsMappingSeparator = function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n  var c = aStr.charAt(index);\n  return c === \";\" || c === \",\";\n};\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  throw new Error(\"Subclasses must implement _parseMappings\");\n};\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping = function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n  var context = aContext || null;\n  var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n  var mappings;\n  switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n  }\n  var sourceRoot = this.sourceRoot;\n  var boundCallback = aCallback.bind(context);\n  var names = this._names;\n  var sources = this._sources;\n  var sourceMapURL = this._sourceMapURL;\n  for (var i = 0, n = mappings.length; i < n; i++) {\n    var mapping = mappings[i];\n    var source = mapping.source === null ? null : sources.at(mapping.source);\n    if (source !== null) {\n      source = util.computeSourceURL(sourceRoot, source, sourceMapURL);\n    }\n    boundCallback({\n      source: source,\n      generatedLine: mapping.generatedLine,\n      generatedColumn: mapping.generatedColumn,\n      originalLine: mapping.originalLine,\n      originalColumn: mapping.originalColumn,\n      name: mapping.name === null ? null : names.at(mapping.name)\n    });\n  }\n};\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor = function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n  var line = util.getArg(aArgs, 'line');\n\n  // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n  // returns the index of the closest mapping less than the needle. By\n  // setting needle.originalColumn to 0, we thus find the last mapping for\n  // the given line, provided such a mapping exists.\n  var needle = {\n    source: util.getArg(aArgs, 'source'),\n    originalLine: line,\n    originalColumn: util.getArg(aArgs, 'column', 0)\n  };\n  needle.source = this._findSourceIndex(needle.source);\n  if (needle.source < 0) {\n    return [];\n  }\n  var mappings = [];\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, binarySearch.LEAST_UPPER_BOUND);\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n    if (aArgs.column === undefined) {\n      var originalLine = mapping.originalLine;\n\n      // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we found. Since\n      // mappings are sorted, this is guaranteed to find all mappings for\n      // the line we found.\n      while (mapping && mapping.originalLine === originalLine) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    } else {\n      var originalColumn = mapping.originalColumn;\n\n      // Iterate until either we run out of mappings, or we run into\n      // a mapping for a different line than the one we were searching for.\n      // Since mappings are sorted, this is guaranteed to find all mappings for\n      // the line we are searching for.\n      while (mapping && mapping.originalLine === line && mapping.originalColumn == originalColumn) {\n        mappings.push({\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        });\n        mapping = this._originalMappings[++index];\n      }\n    }\n  }\n  return mappings;\n};\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n  sources = sources.map(String)\n  // Some source maps produce relative source paths like \"./foo.js\" instead of\n  // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n  // See bugzil.la/1090768.\n  .map(util.normalize)\n  // Always ensure that absolute sources are internally stored relative to\n  // the source root, if the source root is absolute. Not doing this would\n  // be particularly problematic when the source root is a prefix of the\n  // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n  .map(function (source) {\n    return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source) ? util.relative(sourceRoot, source) : source;\n  });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function (aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap = function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n  var smc = Object.create(BasicSourceMapConsumer.prototype);\n  var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n  var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n  smc.sourceRoot = aSourceMap._sourceRoot;\n  smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(), smc.sourceRoot);\n  smc.file = aSourceMap._file;\n  smc._sourceMapURL = aSourceMapURL;\n  smc._absoluteSources = smc._sources.toArray().map(function (s) {\n    return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n  });\n\n  // Because we are modifying the entries (by converting string sources and\n  // names to indices into the sources and names ArraySets), we have to make\n  // a copy of the entry or else bad things happen. Shared mutable state\n  // strikes again! See github issue #191.\n\n  var generatedMappings = aSourceMap._mappings.toArray().slice();\n  var destGeneratedMappings = smc.__generatedMappings = [];\n  var destOriginalMappings = smc.__originalMappings = [];\n  for (var i = 0, length = generatedMappings.length; i < length; i++) {\n    var srcMapping = generatedMappings[i];\n    var destMapping = new Mapping();\n    destMapping.generatedLine = srcMapping.generatedLine;\n    destMapping.generatedColumn = srcMapping.generatedColumn;\n    if (srcMapping.source) {\n      destMapping.source = sources.indexOf(srcMapping.source);\n      destMapping.originalLine = srcMapping.originalLine;\n      destMapping.originalColumn = srcMapping.originalColumn;\n      if (srcMapping.name) {\n        destMapping.name = names.indexOf(srcMapping.name);\n      }\n      destOriginalMappings.push(destMapping);\n    }\n    destGeneratedMappings.push(destMapping);\n  }\n  quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n  return smc;\n};\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\n\nconst compareGenerated = util.compareByGeneratedPositionsDeflatedNoLine;\nfunction sortGenerated(array, start) {\n  let l = array.length;\n  let n = array.length - start;\n  if (n <= 1) {\n    return;\n  } else if (n == 2) {\n    let a = array[start];\n    let b = array[start + 1];\n    if (compareGenerated(a, b) > 0) {\n      array[start] = b;\n      array[start + 1] = a;\n    }\n  } else if (n < 20) {\n    for (let i = start; i < l; i++) {\n      for (let j = i; j > start; j--) {\n        let a = array[j - 1];\n        let b = array[j];\n        if (compareGenerated(a, b) <= 0) {\n          break;\n        }\n        array[j - 1] = b;\n        array[j] = a;\n      }\n    }\n  } else {\n    quickSort(array, compareGenerated, start);\n  }\n}\nBasicSourceMapConsumer.prototype._parseMappings = function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  var generatedLine = 1;\n  var previousGeneratedColumn = 0;\n  var previousOriginalLine = 0;\n  var previousOriginalColumn = 0;\n  var previousSource = 0;\n  var previousName = 0;\n  var length = aStr.length;\n  var index = 0;\n  var cachedSegments = {};\n  var temp = {};\n  var originalMappings = [];\n  var generatedMappings = [];\n  var mapping, str, segment, end, value;\n  let subarrayStart = 0;\n  while (index < length) {\n    if (aStr.charAt(index) === ';') {\n      generatedLine++;\n      index++;\n      previousGeneratedColumn = 0;\n      sortGenerated(generatedMappings, subarrayStart);\n      subarrayStart = generatedMappings.length;\n    } else if (aStr.charAt(index) === ',') {\n      index++;\n    } else {\n      mapping = new Mapping();\n      mapping.generatedLine = generatedLine;\n      for (end = index; end < length; end++) {\n        if (this._charIsMappingSeparator(aStr, end)) {\n          break;\n        }\n      }\n      str = aStr.slice(index, end);\n      segment = [];\n      while (index < end) {\n        base64VLQ.decode(aStr, index, temp);\n        value = temp.value;\n        index = temp.rest;\n        segment.push(value);\n      }\n      if (segment.length === 2) {\n        throw new Error('Found a source, but no line and column');\n      }\n      if (segment.length === 3) {\n        throw new Error('Found a source and line, but no column');\n      }\n\n      // Generated column.\n      mapping.generatedColumn = previousGeneratedColumn + segment[0];\n      previousGeneratedColumn = mapping.generatedColumn;\n      if (segment.length > 1) {\n        // Original source.\n        mapping.source = previousSource + segment[1];\n        previousSource += segment[1];\n\n        // Original line.\n        mapping.originalLine = previousOriginalLine + segment[2];\n        previousOriginalLine = mapping.originalLine;\n        // Lines are stored 0-based\n        mapping.originalLine += 1;\n\n        // Original column.\n        mapping.originalColumn = previousOriginalColumn + segment[3];\n        previousOriginalColumn = mapping.originalColumn;\n        if (segment.length > 4) {\n          // Original name.\n          mapping.name = previousName + segment[4];\n          previousName += segment[4];\n        }\n      }\n      generatedMappings.push(mapping);\n      if (typeof mapping.originalLine === 'number') {\n        let currentSource = mapping.source;\n        while (originalMappings.length <= currentSource) {\n          originalMappings.push(null);\n        }\n        if (originalMappings[currentSource] === null) {\n          originalMappings[currentSource] = [];\n        }\n        originalMappings[currentSource].push(mapping);\n      }\n    }\n  }\n  sortGenerated(generatedMappings, subarrayStart);\n  this.__generatedMappings = generatedMappings;\n  for (var i = 0; i < originalMappings.length; i++) {\n    if (originalMappings[i] != null) {\n      quickSort(originalMappings[i], util.compareByOriginalPositionsNoSource);\n    }\n  }\n  this.__originalMappings = [].concat(...originalMappings);\n};\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping = function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName, aColumnName, aComparator, aBias) {\n  // To return the position we are searching for, we must first find the\n  // mapping for the given position and then return the opposite position it\n  // points to. Because the mappings are sorted, we can use binary search to\n  // find the best mapping.\n\n  if (aNeedle[aLineName] <= 0) {\n    throw new TypeError('Line must be greater than or equal to 1, got ' + aNeedle[aLineName]);\n  }\n  if (aNeedle[aColumnName] < 0) {\n    throw new TypeError('Column must be greater than or equal to 0, got ' + aNeedle[aColumnName]);\n  }\n  return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n};\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans = function SourceMapConsumer_computeColumnSpans() {\n  for (var index = 0; index < this._generatedMappings.length; ++index) {\n    var mapping = this._generatedMappings[index];\n\n    // Mappings do not contain a field for the last generated columnt. We\n    // can come up with an optimistic estimate, however, by assuming that\n    // mappings are contiguous (i.e. given two consecutive mappings, the\n    // first mapping ends where the second one starts).\n    if (index + 1 < this._generatedMappings.length) {\n      var nextMapping = this._generatedMappings[index + 1];\n      if (mapping.generatedLine === nextMapping.generatedLine) {\n        mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n        continue;\n      }\n    }\n\n    // The last mapping for each line spans the entire line.\n    mapping.lastGeneratedColumn = Infinity;\n  }\n};\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor = function SourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  };\n  var index = this._findMapping(needle, this._generatedMappings, \"generatedLine\", \"generatedColumn\", util.compareByGeneratedPositionsDeflated, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n  if (index >= 0) {\n    var mapping = this._generatedMappings[index];\n    if (mapping.generatedLine === needle.generatedLine) {\n      var source = util.getArg(mapping, 'source', null);\n      if (source !== null) {\n        source = this._sources.at(source);\n        source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n      }\n      var name = util.getArg(mapping, 'name', null);\n      if (name !== null) {\n        name = this._names.at(name);\n      }\n      return {\n        source: source,\n        line: util.getArg(mapping, 'originalLine', null),\n        column: util.getArg(mapping, 'originalColumn', null),\n        name: name\n      };\n    }\n  }\n  return {\n    source: null,\n    line: null,\n    column: null,\n    name: null\n  };\n};\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources = function BasicSourceMapConsumer_hasContentsOfAllSources() {\n  if (!this.sourcesContent) {\n    return false;\n  }\n  return this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (sc) {\n    return sc == null;\n  });\n};\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor = function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  if (!this.sourcesContent) {\n    return null;\n  }\n  var index = this._findSourceIndex(aSource);\n  if (index >= 0) {\n    return this.sourcesContent[index];\n  }\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n  var url;\n  if (this.sourceRoot != null && (url = util.urlParse(this.sourceRoot))) {\n    // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n    // many users. We can help them out when they expect file:// URIs to\n    // behave like it would if they were running a local HTTP server. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n    var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n    if (url.scheme == \"file\" && this._sources.has(fileUriAbsPath)) {\n      return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n    }\n    if ((!url.path || url.path == \"/\") && this._sources.has(\"/\" + relativeSource)) {\n      return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n    }\n  }\n\n  // This function is used recursively from\n  // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n  // don't want to throw if we can't find the source - we just want to\n  // return null, so we provide a flag to exit gracefully.\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n  }\n};\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor = function SourceMapConsumer_generatedPositionFor(aArgs) {\n  var source = util.getArg(aArgs, 'source');\n  source = this._findSourceIndex(source);\n  if (source < 0) {\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  }\n  var needle = {\n    source: source,\n    originalLine: util.getArg(aArgs, 'line'),\n    originalColumn: util.getArg(aArgs, 'column')\n  };\n  var index = this._findMapping(needle, this._originalMappings, \"originalLine\", \"originalColumn\", util.compareByOriginalPositions, util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND));\n  if (index >= 0) {\n    var mapping = this._originalMappings[index];\n    if (mapping.source === needle.source) {\n      return {\n        line: util.getArg(mapping, 'generatedLine', null),\n        column: util.getArg(mapping, 'generatedColumn', null),\n        lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n      };\n    }\n  }\n  return {\n    line: null,\n    column: null,\n    lastColumn: null\n  };\n};\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n    if (offsetLine < lastOffset.line || offsetLine === lastOffset.line && offsetColumn < lastOffset.column) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    };\n  });\n}\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor = function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n  var needle = {\n    generatedLine: util.getArg(aArgs, 'line'),\n    generatedColumn: util.getArg(aArgs, 'column')\n  };\n\n  // Find the section containing the generated position we're trying to map\n  // to an original position.\n  var sectionIndex = binarySearch.search(needle, this._sections, function (needle, section) {\n    var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n    if (cmp) {\n      return cmp;\n    }\n    return needle.generatedColumn - section.generatedOffset.generatedColumn;\n  });\n  var section = this._sections[sectionIndex];\n  if (!section) {\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  }\n  return section.consumer.originalPositionFor({\n    line: needle.generatedLine - (section.generatedOffset.generatedLine - 1),\n    column: needle.generatedColumn - (section.generatedOffset.generatedLine === needle.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n    bias: aArgs.bias\n  });\n};\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources = function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n  return this._sections.every(function (s) {\n    return s.consumer.hasContentsOfAllSources();\n  });\n};\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor = function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var content = section.consumer.sourceContentFor(aSource, true);\n    if (content || content === '') {\n      return content;\n    }\n  }\n  if (nullOnMissing) {\n    return null;\n  } else {\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n};\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor = function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n\n    // Only consider this section if the requested source is in the list of\n    // sources of the consumer.\n    if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n      continue;\n    }\n    var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n    if (generatedPosition) {\n      var ret = {\n        line: generatedPosition.line + (section.generatedOffset.generatedLine - 1),\n        column: generatedPosition.column + (section.generatedOffset.generatedLine === generatedPosition.line ? section.generatedOffset.generatedColumn - 1 : 0)\n      };\n      return ret;\n    }\n  }\n  return {\n    line: null,\n    column: null\n  };\n};\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings = function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n  this.__generatedMappings = [];\n  this.__originalMappings = [];\n  for (var i = 0; i < this._sections.length; i++) {\n    var section = this._sections[i];\n    var sectionMappings = section.consumer._generatedMappings;\n    for (var j = 0; j < sectionMappings.length; j++) {\n      var mapping = sectionMappings[j];\n      var source = section.consumer._sources.at(mapping.source);\n      if (source !== null) {\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n      }\n      this._sources.add(source);\n      source = this._sources.indexOf(source);\n      var name = null;\n      if (mapping.name) {\n        name = section.consumer._names.at(mapping.name);\n        this._names.add(name);\n        name = this._names.indexOf(name);\n      }\n\n      // The mappings coming from the consumer for the section have\n      // generated positions relative to the start of the section, so we\n      // need to offset them to be relative to the start of the concatenated\n      // generated file.\n      var adjustedMapping = {\n        source: source,\n        generatedLine: mapping.generatedLine + (section.generatedOffset.generatedLine - 1),\n        generatedColumn: mapping.generatedColumn + (section.generatedOffset.generatedLine === mapping.generatedLine ? section.generatedOffset.generatedColumn - 1 : 0),\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: name\n      };\n      this.__generatedMappings.push(adjustedMapping);\n      if (typeof adjustedMapping.originalLine === 'number') {\n        this.__originalMappings.push(adjustedMapping);\n      }\n    }\n  }\n  quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n  quickSort(this.__originalMappings, util.compareByOriginalPositions);\n};\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;","map":{"version":3,"names":["util","require","binarySearch","ArraySet","base64VLQ","quickSort","SourceMapConsumer","aSourceMap","aSourceMapURL","sourceMap","parseSourceMapInput","sections","IndexedSourceMapConsumer","BasicSourceMapConsumer","fromSourceMap","prototype","_version","__generatedMappings","Object","defineProperty","configurable","enumerable","get","_parseMappings","_mappings","sourceRoot","__originalMappings","_charIsMappingSeparator","SourceMapConsumer_charIsMappingSeparator","aStr","index","c","charAt","SourceMapConsumer_parseMappings","aSourceRoot","Error","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","eachMapping","SourceMapConsumer_eachMapping","aCallback","aContext","aOrder","context","order","mappings","_generatedMappings","_originalMappings","boundCallback","bind","names","_names","sources","_sources","sourceMapURL","_sourceMapURL","i","n","length","mapping","source","at","computeSourceURL","generatedLine","generatedColumn","originalLine","originalColumn","name","allGeneratedPositionsFor","SourceMapConsumer_allGeneratedPositionsFor","aArgs","line","getArg","needle","_findSourceIndex","_findMapping","compareByOriginalPositions","column","undefined","push","lastColumn","exports","version","sourcesContent","file","normalize","map","String","isAbsolute","relative","fromArray","_absoluteSources","toArray","s","create","consumer","aSource","relativeSource","has","indexOf","SourceMapConsumer_fromSourceMap","smc","_sourceRoot","_generateSourcesContent","_file","generatedMappings","slice","destGeneratedMappings","destOriginalMappings","srcMapping","destMapping","Mapping","compareGenerated","compareByGeneratedPositionsDeflatedNoLine","sortGenerated","array","start","l","a","b","j","previousGeneratedColumn","previousOriginalLine","previousOriginalColumn","previousSource","previousName","cachedSegments","temp","originalMappings","str","segment","end","value","subarrayStart","decode","rest","currentSource","compareByOriginalPositionsNoSource","concat","SourceMapConsumer_findMapping","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","TypeError","search","computeColumnSpans","SourceMapConsumer_computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","originalPositionFor","SourceMapConsumer_originalPositionFor","compareByGeneratedPositionsDeflated","hasContentsOfAllSources","BasicSourceMapConsumer_hasContentsOfAllSources","size","some","sc","sourceContentFor","SourceMapConsumer_sourceContentFor","nullOnMissing","url","urlParse","fileUriAbsPath","replace","scheme","path","generatedPositionFor","SourceMapConsumer_generatedPositionFor","lastOffset","_sections","offset","offsetLine","offsetColumn","generatedOffset","constructor","IndexedSourceMapConsumer_originalPositionFor","sectionIndex","section","cmp","bias","IndexedSourceMapConsumer_hasContentsOfAllSources","every","IndexedSourceMapConsumer_sourceContentFor","content","IndexedSourceMapConsumer_generatedPositionFor","generatedPosition","ret","IndexedSourceMapConsumer_parseMappings","sectionMappings","add","adjustedMapping"],"sources":["C:/Users/dah03/calendar/mycalendar/node_modules/source-map-js/lib/source-map-consumer.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    var boundCallback = aCallback.bind(context);\n    var names = this._names;\n    var sources = this._sources;\n    var sourceMapURL = this._sourceMapURL;\n\n    for (var i = 0, n = mappings.length; i < n; i++) {\n      var mapping = mappings[i];\n      var source = mapping.source === null ? null : sources.at(mapping.source);\n      if(source !== null) {\n        source = util.computeSourceURL(sourceRoot, source, sourceMapURL);\n      }\n      boundCallback({\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : names.at(mapping.name)\n      });\n    }\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\n\nconst compareGenerated = util.compareByGeneratedPositionsDeflatedNoLine;\nfunction sortGenerated(array, start) {\n  let l = array.length;\n  let n = array.length - start;\n  if (n <= 1) {\n    return;\n  } else if (n == 2) {\n    let a = array[start];\n    let b = array[start + 1];\n    if (compareGenerated(a, b) > 0) {\n      array[start] = b;\n      array[start + 1] = a;\n    }\n  } else if (n < 20) {\n    for (let i = start; i < l; i++) {\n      for (let j = i; j > start; j--) {\n        let a = array[j - 1];\n        let b = array[j];\n        if (compareGenerated(a, b) <= 0) {\n          break;\n        }\n        array[j - 1] = b;\n        array[j] = a;\n      }\n    }\n  } else {\n    quickSort(array, compareGenerated, start);\n  }\n}\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    let subarrayStart = 0;\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n\n        sortGenerated(generatedMappings, subarrayStart);\n        subarrayStart = generatedMappings.length;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = [];\n        while (index < end) {\n          base64VLQ.decode(aStr, index, temp);\n          value = temp.value;\n          index = temp.rest;\n          segment.push(value);\n        }\n\n        if (segment.length === 2) {\n          throw new Error('Found a source, but no line and column');\n        }\n\n        if (segment.length === 3) {\n          throw new Error('Found a source and line, but no column');\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          let currentSource = mapping.source;\n          while (originalMappings.length <= currentSource) {\n            originalMappings.push(null);\n          }\n          if (originalMappings[currentSource] === null) {\n            originalMappings[currentSource] = [];\n          }\n          originalMappings[currentSource].push(mapping);\n        }\n      }\n    }\n\n    sortGenerated(generatedMappings, subarrayStart);\n    this.__generatedMappings = generatedMappings;\n\n    for (var i = 0; i < originalMappings.length; i++) {\n      if (originalMappings[i] != null) {\n        quickSort(originalMappings[i], util.compareByOriginalPositionsNoSource);\n      }\n    }\n    this.__originalMappings = [].concat(...originalMappings);\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content || content === '') {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        if(source !== null) {\n          source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        }\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAC5B,IAAIC,YAAY,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAC7C,IAAIE,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC,CAACE,QAAQ;AAC9C,IAAIC,SAAS,GAAGH,OAAO,CAAC,cAAc,CAAC;AACvC,IAAII,SAAS,GAAGJ,OAAO,CAAC,cAAc,CAAC,CAACI,SAAS;AAEjD,SAASC,iBAAiBA,CAACC,UAAU,EAAEC,aAAa,EAAE;EACpD,IAAIC,SAAS,GAAGF,UAAU;EAC1B,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAClCE,SAAS,GAAGT,IAAI,CAACU,mBAAmB,CAACH,UAAU,CAAC;EAClD;EAEA,OAAOE,SAAS,CAACE,QAAQ,IAAI,IAAI,GAC7B,IAAIC,wBAAwB,CAACH,SAAS,EAAED,aAAa,CAAC,GACtD,IAAIK,sBAAsB,CAACJ,SAAS,EAAED,aAAa,CAAC;AAC1D;AAEAF,iBAAiB,CAACQ,aAAa,GAAG,UAASP,UAAU,EAAEC,aAAa,EAAE;EACpE,OAAOK,sBAAsB,CAACC,aAAa,CAACP,UAAU,EAAEC,aAAa,CAAC;AACxE,CAAC;;AAED;AACA;AACA;AACAF,iBAAiB,CAACS,SAAS,CAACC,QAAQ,GAAG,CAAC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,iBAAiB,CAACS,SAAS,CAACE,mBAAmB,GAAG,IAAI;AACtDC,MAAM,CAACC,cAAc,CAACb,iBAAiB,CAACS,SAAS,EAAE,oBAAoB,EAAE;EACvEK,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAAAA,CAAA,EAAY;IACf,IAAI,CAAC,IAAI,CAACL,mBAAmB,EAAE;MAC7B,IAAI,CAACM,cAAc,CAAC,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,UAAU,CAAC;IACtD;IAEA,OAAO,IAAI,CAACR,mBAAmB;EACjC;AACF,CAAC,CAAC;AAEFX,iBAAiB,CAACS,SAAS,CAACW,kBAAkB,GAAG,IAAI;AACrDR,MAAM,CAACC,cAAc,CAACb,iBAAiB,CAACS,SAAS,EAAE,mBAAmB,EAAE;EACtEK,YAAY,EAAE,IAAI;EAClBC,UAAU,EAAE,IAAI;EAChBC,GAAG,EAAE,SAAAA,CAAA,EAAY;IACf,IAAI,CAAC,IAAI,CAACI,kBAAkB,EAAE;MAC5B,IAAI,CAACH,cAAc,CAAC,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,UAAU,CAAC;IACtD;IAEA,OAAO,IAAI,CAACC,kBAAkB;EAChC;AACF,CAAC,CAAC;AAEFpB,iBAAiB,CAACS,SAAS,CAACY,uBAAuB,GACjD,SAASC,wCAAwCA,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC7D,IAAIC,CAAC,GAAGF,IAAI,CAACG,MAAM,CAACF,KAAK,CAAC;EAC1B,OAAOC,CAAC,KAAK,GAAG,IAAIA,CAAC,KAAK,GAAG;AAC/B,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACAzB,iBAAiB,CAACS,SAAS,CAACQ,cAAc,GACxC,SAASU,+BAA+BA,CAACJ,IAAI,EAAEK,WAAW,EAAE;EAC1D,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;AAC7D,CAAC;AAEH7B,iBAAiB,CAAC8B,eAAe,GAAG,CAAC;AACrC9B,iBAAiB,CAAC+B,cAAc,GAAG,CAAC;AAEpC/B,iBAAiB,CAACgC,oBAAoB,GAAG,CAAC;AAC1ChC,iBAAiB,CAACiC,iBAAiB,GAAG,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAjC,iBAAiB,CAACS,SAAS,CAACyB,WAAW,GACrC,SAASC,6BAA6BA,CAACC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,EAAE;EAClE,IAAIC,OAAO,GAAGF,QAAQ,IAAI,IAAI;EAC9B,IAAIG,KAAK,GAAGF,MAAM,IAAItC,iBAAiB,CAAC8B,eAAe;EAEvD,IAAIW,QAAQ;EACZ,QAAQD,KAAK;IACb,KAAKxC,iBAAiB,CAAC8B,eAAe;MACpCW,QAAQ,GAAG,IAAI,CAACC,kBAAkB;MAClC;IACF,KAAK1C,iBAAiB,CAAC+B,cAAc;MACnCU,QAAQ,GAAG,IAAI,CAACE,iBAAiB;MACjC;IACF;MACE,MAAM,IAAId,KAAK,CAAC,6BAA6B,CAAC;EAChD;EAEA,IAAIV,UAAU,GAAG,IAAI,CAACA,UAAU;EAChC,IAAIyB,aAAa,GAAGR,SAAS,CAACS,IAAI,CAACN,OAAO,CAAC;EAC3C,IAAIO,KAAK,GAAG,IAAI,CAACC,MAAM;EACvB,IAAIC,OAAO,GAAG,IAAI,CAACC,QAAQ;EAC3B,IAAIC,YAAY,GAAG,IAAI,CAACC,aAAa;EAErC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGZ,QAAQ,CAACa,MAAM,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IAC/C,IAAIG,OAAO,GAAGd,QAAQ,CAACW,CAAC,CAAC;IACzB,IAAII,MAAM,GAAGD,OAAO,CAACC,MAAM,KAAK,IAAI,GAAG,IAAI,GAAGR,OAAO,CAACS,EAAE,CAACF,OAAO,CAACC,MAAM,CAAC;IACxE,IAAGA,MAAM,KAAK,IAAI,EAAE;MAClBA,MAAM,GAAG9D,IAAI,CAACgE,gBAAgB,CAACvC,UAAU,EAAEqC,MAAM,EAAEN,YAAY,CAAC;IAClE;IACAN,aAAa,CAAC;MACZY,MAAM,EAAEA,MAAM;MACdG,aAAa,EAAEJ,OAAO,CAACI,aAAa;MACpCC,eAAe,EAAEL,OAAO,CAACK,eAAe;MACxCC,YAAY,EAAEN,OAAO,CAACM,YAAY;MAClCC,cAAc,EAAEP,OAAO,CAACO,cAAc;MACtCC,IAAI,EAAER,OAAO,CAACQ,IAAI,KAAK,IAAI,GAAG,IAAI,GAAGjB,KAAK,CAACW,EAAE,CAACF,OAAO,CAACQ,IAAI;IAC5D,CAAC,CAAC;EACJ;AACF,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA/D,iBAAiB,CAACS,SAAS,CAACuD,wBAAwB,GAClD,SAASC,0CAA0CA,CAACC,KAAK,EAAE;EACzD,IAAIC,IAAI,GAAGzE,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,MAAM,CAAC;;EAErC;EACA;EACA;EACA;EACA,IAAIG,MAAM,GAAG;IACXb,MAAM,EAAE9D,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,QAAQ,CAAC;IACpCL,YAAY,EAAEM,IAAI;IAClBL,cAAc,EAAEpE,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,QAAQ,EAAE,CAAC;EAChD,CAAC;EAEDG,MAAM,CAACb,MAAM,GAAG,IAAI,CAACc,gBAAgB,CAACD,MAAM,CAACb,MAAM,CAAC;EACpD,IAAIa,MAAM,CAACb,MAAM,GAAG,CAAC,EAAE;IACrB,OAAO,EAAE;EACX;EAEA,IAAIf,QAAQ,GAAG,EAAE;EAEjB,IAAIjB,KAAK,GAAG,IAAI,CAAC+C,YAAY,CAACF,MAAM,EACN,IAAI,CAAC1B,iBAAiB,EACtB,cAAc,EACd,gBAAgB,EAChBjD,IAAI,CAAC8E,0BAA0B,EAC/B5E,YAAY,CAACqC,iBAAiB,CAAC;EAC7D,IAAIT,KAAK,IAAI,CAAC,EAAE;IACd,IAAI+B,OAAO,GAAG,IAAI,CAACZ,iBAAiB,CAACnB,KAAK,CAAC;IAE3C,IAAI0C,KAAK,CAACO,MAAM,KAAKC,SAAS,EAAE;MAC9B,IAAIb,YAAY,GAAGN,OAAO,CAACM,YAAY;;MAEvC;MACA;MACA;MACA;MACA,OAAON,OAAO,IAAIA,OAAO,CAACM,YAAY,KAAKA,YAAY,EAAE;QACvDpB,QAAQ,CAACkC,IAAI,CAAC;UACZR,IAAI,EAAEzE,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,eAAe,EAAE,IAAI,CAAC;UACjDkB,MAAM,EAAE/E,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,iBAAiB,EAAE,IAAI,CAAC;UACrDqB,UAAU,EAAElF,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,qBAAqB,EAAE,IAAI;QAC9D,CAAC,CAAC;QAEFA,OAAO,GAAG,IAAI,CAACZ,iBAAiB,CAAC,EAAEnB,KAAK,CAAC;MAC3C;IACF,CAAC,MAAM;MACL,IAAIsC,cAAc,GAAGP,OAAO,CAACO,cAAc;;MAE3C;MACA;MACA;MACA;MACA,OAAOP,OAAO,IACPA,OAAO,CAACM,YAAY,KAAKM,IAAI,IAC7BZ,OAAO,CAACO,cAAc,IAAIA,cAAc,EAAE;QAC/CrB,QAAQ,CAACkC,IAAI,CAAC;UACZR,IAAI,EAAEzE,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,eAAe,EAAE,IAAI,CAAC;UACjDkB,MAAM,EAAE/E,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,iBAAiB,EAAE,IAAI,CAAC;UACrDqB,UAAU,EAAElF,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,qBAAqB,EAAE,IAAI;QAC9D,CAAC,CAAC;QAEFA,OAAO,GAAG,IAAI,CAACZ,iBAAiB,CAAC,EAAEnB,KAAK,CAAC;MAC3C;IACF;EACF;EAEA,OAAOiB,QAAQ;AACjB,CAAC;AAEHoC,OAAO,CAAC7E,iBAAiB,GAAGA,iBAAiB;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASO,sBAAsBA,CAACN,UAAU,EAAEC,aAAa,EAAE;EACzD,IAAIC,SAAS,GAAGF,UAAU;EAC1B,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAClCE,SAAS,GAAGT,IAAI,CAACU,mBAAmB,CAACH,UAAU,CAAC;EAClD;EAEA,IAAI6E,OAAO,GAAGpF,IAAI,CAAC0E,MAAM,CAACjE,SAAS,EAAE,SAAS,CAAC;EAC/C,IAAI6C,OAAO,GAAGtD,IAAI,CAAC0E,MAAM,CAACjE,SAAS,EAAE,SAAS,CAAC;EAC/C;EACA;EACA,IAAI2C,KAAK,GAAGpD,IAAI,CAAC0E,MAAM,CAACjE,SAAS,EAAE,OAAO,EAAE,EAAE,CAAC;EAC/C,IAAIgB,UAAU,GAAGzB,IAAI,CAAC0E,MAAM,CAACjE,SAAS,EAAE,YAAY,EAAE,IAAI,CAAC;EAC3D,IAAI4E,cAAc,GAAGrF,IAAI,CAAC0E,MAAM,CAACjE,SAAS,EAAE,gBAAgB,EAAE,IAAI,CAAC;EACnE,IAAIsC,QAAQ,GAAG/C,IAAI,CAAC0E,MAAM,CAACjE,SAAS,EAAE,UAAU,CAAC;EACjD,IAAI6E,IAAI,GAAGtF,IAAI,CAAC0E,MAAM,CAACjE,SAAS,EAAE,MAAM,EAAE,IAAI,CAAC;;EAE/C;EACA;EACA,IAAI2E,OAAO,IAAI,IAAI,CAACpE,QAAQ,EAAE;IAC5B,MAAM,IAAImB,KAAK,CAAC,uBAAuB,GAAGiD,OAAO,CAAC;EACpD;EAEA,IAAI3D,UAAU,EAAE;IACdA,UAAU,GAAGzB,IAAI,CAACuF,SAAS,CAAC9D,UAAU,CAAC;EACzC;EAEA6B,OAAO,GAAGA,OAAO,CACdkC,GAAG,CAACC,MAAM;EACX;EACA;EACA;EAAA,CACCD,GAAG,CAACxF,IAAI,CAACuF,SAAS;EACnB;EACA;EACA;EACA;EAAA,CACCC,GAAG,CAAC,UAAU1B,MAAM,EAAE;IACrB,OAAOrC,UAAU,IAAIzB,IAAI,CAAC0F,UAAU,CAACjE,UAAU,CAAC,IAAIzB,IAAI,CAAC0F,UAAU,CAAC5B,MAAM,CAAC,GACvE9D,IAAI,CAAC2F,QAAQ,CAAClE,UAAU,EAAEqC,MAAM,CAAC,GACjCA,MAAM;EACZ,CAAC,CAAC;;EAEJ;EACA;EACA;EACA;EACA,IAAI,CAACT,MAAM,GAAGlD,QAAQ,CAACyF,SAAS,CAACxC,KAAK,CAACoC,GAAG,CAACC,MAAM,CAAC,EAAE,IAAI,CAAC;EACzD,IAAI,CAAClC,QAAQ,GAAGpD,QAAQ,CAACyF,SAAS,CAACtC,OAAO,EAAE,IAAI,CAAC;EAEjD,IAAI,CAACuC,gBAAgB,GAAG,IAAI,CAACtC,QAAQ,CAACuC,OAAO,CAAC,CAAC,CAACN,GAAG,CAAC,UAAUO,CAAC,EAAE;IAC/D,OAAO/F,IAAI,CAACgE,gBAAgB,CAACvC,UAAU,EAAEsE,CAAC,EAAEvF,aAAa,CAAC;EAC5D,CAAC,CAAC;EAEF,IAAI,CAACiB,UAAU,GAAGA,UAAU;EAC5B,IAAI,CAAC4D,cAAc,GAAGA,cAAc;EACpC,IAAI,CAAC7D,SAAS,GAAGuB,QAAQ;EACzB,IAAI,CAACU,aAAa,GAAGjD,aAAa;EAClC,IAAI,CAAC8E,IAAI,GAAGA,IAAI;AAClB;AAEAzE,sBAAsB,CAACE,SAAS,GAAGG,MAAM,CAAC8E,MAAM,CAAC1F,iBAAiB,CAACS,SAAS,CAAC;AAC7EF,sBAAsB,CAACE,SAAS,CAACkF,QAAQ,GAAG3F,iBAAiB;;AAE7D;AACA;AACA;AACA;AACAO,sBAAsB,CAACE,SAAS,CAAC6D,gBAAgB,GAAG,UAASsB,OAAO,EAAE;EACpE,IAAIC,cAAc,GAAGD,OAAO;EAC5B,IAAI,IAAI,CAACzE,UAAU,IAAI,IAAI,EAAE;IAC3B0E,cAAc,GAAGnG,IAAI,CAAC2F,QAAQ,CAAC,IAAI,CAAClE,UAAU,EAAE0E,cAAc,CAAC;EACjE;EAEA,IAAI,IAAI,CAAC5C,QAAQ,CAAC6C,GAAG,CAACD,cAAc,CAAC,EAAE;IACrC,OAAO,IAAI,CAAC5C,QAAQ,CAAC8C,OAAO,CAACF,cAAc,CAAC;EAC9C;;EAEA;EACA;EACA,IAAIzC,CAAC;EACL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACmC,gBAAgB,CAACjC,MAAM,EAAE,EAAEF,CAAC,EAAE;IACjD,IAAI,IAAI,CAACmC,gBAAgB,CAACnC,CAAC,CAAC,IAAIwC,OAAO,EAAE;MACvC,OAAOxC,CAAC;IACV;EACF;EAEA,OAAO,CAAC,CAAC;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7C,sBAAsB,CAACC,aAAa,GAClC,SAASwF,+BAA+BA,CAAC/F,UAAU,EAAEC,aAAa,EAAE;EAClE,IAAI+F,GAAG,GAAGrF,MAAM,CAAC8E,MAAM,CAACnF,sBAAsB,CAACE,SAAS,CAAC;EAEzD,IAAIqC,KAAK,GAAGmD,GAAG,CAAClD,MAAM,GAAGlD,QAAQ,CAACyF,SAAS,CAACrF,UAAU,CAAC8C,MAAM,CAACyC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC;EAC9E,IAAIxC,OAAO,GAAGiD,GAAG,CAAChD,QAAQ,GAAGpD,QAAQ,CAACyF,SAAS,CAACrF,UAAU,CAACgD,QAAQ,CAACuC,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC;EACpFS,GAAG,CAAC9E,UAAU,GAAGlB,UAAU,CAACiG,WAAW;EACvCD,GAAG,CAAClB,cAAc,GAAG9E,UAAU,CAACkG,uBAAuB,CAACF,GAAG,CAAChD,QAAQ,CAACuC,OAAO,CAAC,CAAC,EACtBS,GAAG,CAAC9E,UAAU,CAAC;EACvE8E,GAAG,CAACjB,IAAI,GAAG/E,UAAU,CAACmG,KAAK;EAC3BH,GAAG,CAAC9C,aAAa,GAAGjD,aAAa;EACjC+F,GAAG,CAACV,gBAAgB,GAAGU,GAAG,CAAChD,QAAQ,CAACuC,OAAO,CAAC,CAAC,CAACN,GAAG,CAAC,UAAUO,CAAC,EAAE;IAC7D,OAAO/F,IAAI,CAACgE,gBAAgB,CAACuC,GAAG,CAAC9E,UAAU,EAAEsE,CAAC,EAAEvF,aAAa,CAAC;EAChE,CAAC,CAAC;;EAEF;EACA;EACA;EACA;;EAEA,IAAImG,iBAAiB,GAAGpG,UAAU,CAACiB,SAAS,CAACsE,OAAO,CAAC,CAAC,CAACc,KAAK,CAAC,CAAC;EAC9D,IAAIC,qBAAqB,GAAGN,GAAG,CAACtF,mBAAmB,GAAG,EAAE;EACxD,IAAI6F,oBAAoB,GAAGP,GAAG,CAAC7E,kBAAkB,GAAG,EAAE;EAEtD,KAAK,IAAIgC,CAAC,GAAG,CAAC,EAAEE,MAAM,GAAG+C,iBAAiB,CAAC/C,MAAM,EAAEF,CAAC,GAAGE,MAAM,EAAEF,CAAC,EAAE,EAAE;IAClE,IAAIqD,UAAU,GAAGJ,iBAAiB,CAACjD,CAAC,CAAC;IACrC,IAAIsD,WAAW,GAAG,IAAIC,OAAO,CAAD,CAAC;IAC7BD,WAAW,CAAC/C,aAAa,GAAG8C,UAAU,CAAC9C,aAAa;IACpD+C,WAAW,CAAC9C,eAAe,GAAG6C,UAAU,CAAC7C,eAAe;IAExD,IAAI6C,UAAU,CAACjD,MAAM,EAAE;MACrBkD,WAAW,CAAClD,MAAM,GAAGR,OAAO,CAAC+C,OAAO,CAACU,UAAU,CAACjD,MAAM,CAAC;MACvDkD,WAAW,CAAC7C,YAAY,GAAG4C,UAAU,CAAC5C,YAAY;MAClD6C,WAAW,CAAC5C,cAAc,GAAG2C,UAAU,CAAC3C,cAAc;MAEtD,IAAI2C,UAAU,CAAC1C,IAAI,EAAE;QACnB2C,WAAW,CAAC3C,IAAI,GAAGjB,KAAK,CAACiD,OAAO,CAACU,UAAU,CAAC1C,IAAI,CAAC;MACnD;MAEAyC,oBAAoB,CAAC7B,IAAI,CAAC+B,WAAW,CAAC;IACxC;IAEAH,qBAAqB,CAAC5B,IAAI,CAAC+B,WAAW,CAAC;EACzC;EAEA3G,SAAS,CAACkG,GAAG,CAAC7E,kBAAkB,EAAE1B,IAAI,CAAC8E,0BAA0B,CAAC;EAElE,OAAOyB,GAAG;AACZ,CAAC;;AAEH;AACA;AACA;AACA1F,sBAAsB,CAACE,SAAS,CAACC,QAAQ,GAAG,CAAC;;AAE7C;AACA;AACA;AACAE,MAAM,CAACC,cAAc,CAACN,sBAAsB,CAACE,SAAS,EAAE,SAAS,EAAE;EACjEO,GAAG,EAAE,SAAAA,CAAA,EAAY;IACf,OAAO,IAAI,CAACuE,gBAAgB,CAACe,KAAK,CAAC,CAAC;EACtC;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA,SAASK,OAAOA,CAAA,EAAG;EACjB,IAAI,CAAChD,aAAa,GAAG,CAAC;EACtB,IAAI,CAACC,eAAe,GAAG,CAAC;EACxB,IAAI,CAACJ,MAAM,GAAG,IAAI;EAClB,IAAI,CAACK,YAAY,GAAG,IAAI;EACxB,IAAI,CAACC,cAAc,GAAG,IAAI;EAC1B,IAAI,CAACC,IAAI,GAAG,IAAI;AAClB;;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAM6C,gBAAgB,GAAGlH,IAAI,CAACmH,yCAAyC;AACvE,SAASC,aAAaA,CAACC,KAAK,EAAEC,KAAK,EAAE;EACnC,IAAIC,CAAC,GAAGF,KAAK,CAACzD,MAAM;EACpB,IAAID,CAAC,GAAG0D,KAAK,CAACzD,MAAM,GAAG0D,KAAK;EAC5B,IAAI3D,CAAC,IAAI,CAAC,EAAE;IACV;EACF,CAAC,MAAM,IAAIA,CAAC,IAAI,CAAC,EAAE;IACjB,IAAI6D,CAAC,GAAGH,KAAK,CAACC,KAAK,CAAC;IACpB,IAAIG,CAAC,GAAGJ,KAAK,CAACC,KAAK,GAAG,CAAC,CAAC;IACxB,IAAIJ,gBAAgB,CAACM,CAAC,EAAEC,CAAC,CAAC,GAAG,CAAC,EAAE;MAC9BJ,KAAK,CAACC,KAAK,CAAC,GAAGG,CAAC;MAChBJ,KAAK,CAACC,KAAK,GAAG,CAAC,CAAC,GAAGE,CAAC;IACtB;EACF,CAAC,MAAM,IAAI7D,CAAC,GAAG,EAAE,EAAE;IACjB,KAAK,IAAID,CAAC,GAAG4D,KAAK,EAAE5D,CAAC,GAAG6D,CAAC,EAAE7D,CAAC,EAAE,EAAE;MAC9B,KAAK,IAAIgE,CAAC,GAAGhE,CAAC,EAAEgE,CAAC,GAAGJ,KAAK,EAAEI,CAAC,EAAE,EAAE;QAC9B,IAAIF,CAAC,GAAGH,KAAK,CAACK,CAAC,GAAG,CAAC,CAAC;QACpB,IAAID,CAAC,GAAGJ,KAAK,CAACK,CAAC,CAAC;QAChB,IAAIR,gBAAgB,CAACM,CAAC,EAAEC,CAAC,CAAC,IAAI,CAAC,EAAE;UAC/B;QACF;QACAJ,KAAK,CAACK,CAAC,GAAG,CAAC,CAAC,GAAGD,CAAC;QAChBJ,KAAK,CAACK,CAAC,CAAC,GAAGF,CAAC;MACd;IACF;EACF,CAAC,MAAM;IACLnH,SAAS,CAACgH,KAAK,EAAEH,gBAAgB,EAAEI,KAAK,CAAC;EAC3C;AACF;AACAzG,sBAAsB,CAACE,SAAS,CAACQ,cAAc,GAC7C,SAASU,+BAA+BA,CAACJ,IAAI,EAAEK,WAAW,EAAE;EAC1D,IAAI+B,aAAa,GAAG,CAAC;EACrB,IAAI0D,uBAAuB,GAAG,CAAC;EAC/B,IAAIC,oBAAoB,GAAG,CAAC;EAC5B,IAAIC,sBAAsB,GAAG,CAAC;EAC9B,IAAIC,cAAc,GAAG,CAAC;EACtB,IAAIC,YAAY,GAAG,CAAC;EACpB,IAAInE,MAAM,GAAG/B,IAAI,CAAC+B,MAAM;EACxB,IAAI9B,KAAK,GAAG,CAAC;EACb,IAAIkG,cAAc,GAAG,CAAC,CAAC;EACvB,IAAIC,IAAI,GAAG,CAAC,CAAC;EACb,IAAIC,gBAAgB,GAAG,EAAE;EACzB,IAAIvB,iBAAiB,GAAG,EAAE;EAC1B,IAAI9C,OAAO,EAAEsE,GAAG,EAAEC,OAAO,EAAEC,GAAG,EAAEC,KAAK;EAErC,IAAIC,aAAa,GAAG,CAAC;EACrB,OAAOzG,KAAK,GAAG8B,MAAM,EAAE;IACrB,IAAI/B,IAAI,CAACG,MAAM,CAACF,KAAK,CAAC,KAAK,GAAG,EAAE;MAC9BmC,aAAa,EAAE;MACfnC,KAAK,EAAE;MACP6F,uBAAuB,GAAG,CAAC;MAE3BP,aAAa,CAACT,iBAAiB,EAAE4B,aAAa,CAAC;MAC/CA,aAAa,GAAG5B,iBAAiB,CAAC/C,MAAM;IAC1C,CAAC,MACI,IAAI/B,IAAI,CAACG,MAAM,CAACF,KAAK,CAAC,KAAK,GAAG,EAAE;MACnCA,KAAK,EAAE;IACT,CAAC,MACI;MACH+B,OAAO,GAAG,IAAIoD,OAAO,CAAC,CAAC;MACvBpD,OAAO,CAACI,aAAa,GAAGA,aAAa;MAErC,KAAKoE,GAAG,GAAGvG,KAAK,EAAEuG,GAAG,GAAGzE,MAAM,EAAEyE,GAAG,EAAE,EAAE;QACrC,IAAI,IAAI,CAAC1G,uBAAuB,CAACE,IAAI,EAAEwG,GAAG,CAAC,EAAE;UAC3C;QACF;MACF;MACAF,GAAG,GAAGtG,IAAI,CAAC+E,KAAK,CAAC9E,KAAK,EAAEuG,GAAG,CAAC;MAE5BD,OAAO,GAAG,EAAE;MACZ,OAAOtG,KAAK,GAAGuG,GAAG,EAAE;QAClBjI,SAAS,CAACoI,MAAM,CAAC3G,IAAI,EAAEC,KAAK,EAAEmG,IAAI,CAAC;QACnCK,KAAK,GAAGL,IAAI,CAACK,KAAK;QAClBxG,KAAK,GAAGmG,IAAI,CAACQ,IAAI;QACjBL,OAAO,CAACnD,IAAI,CAACqD,KAAK,CAAC;MACrB;MAEA,IAAIF,OAAO,CAACxE,MAAM,KAAK,CAAC,EAAE;QACxB,MAAM,IAAIzB,KAAK,CAAC,wCAAwC,CAAC;MAC3D;MAEA,IAAIiG,OAAO,CAACxE,MAAM,KAAK,CAAC,EAAE;QACxB,MAAM,IAAIzB,KAAK,CAAC,wCAAwC,CAAC;MAC3D;;MAEA;MACA0B,OAAO,CAACK,eAAe,GAAGyD,uBAAuB,GAAGS,OAAO,CAAC,CAAC,CAAC;MAC9DT,uBAAuB,GAAG9D,OAAO,CAACK,eAAe;MAEjD,IAAIkE,OAAO,CAACxE,MAAM,GAAG,CAAC,EAAE;QACtB;QACAC,OAAO,CAACC,MAAM,GAAGgE,cAAc,GAAGM,OAAO,CAAC,CAAC,CAAC;QAC5CN,cAAc,IAAIM,OAAO,CAAC,CAAC,CAAC;;QAE5B;QACAvE,OAAO,CAACM,YAAY,GAAGyD,oBAAoB,GAAGQ,OAAO,CAAC,CAAC,CAAC;QACxDR,oBAAoB,GAAG/D,OAAO,CAACM,YAAY;QAC3C;QACAN,OAAO,CAACM,YAAY,IAAI,CAAC;;QAEzB;QACAN,OAAO,CAACO,cAAc,GAAGyD,sBAAsB,GAAGO,OAAO,CAAC,CAAC,CAAC;QAC5DP,sBAAsB,GAAGhE,OAAO,CAACO,cAAc;QAE/C,IAAIgE,OAAO,CAACxE,MAAM,GAAG,CAAC,EAAE;UACtB;UACAC,OAAO,CAACQ,IAAI,GAAG0D,YAAY,GAAGK,OAAO,CAAC,CAAC,CAAC;UACxCL,YAAY,IAAIK,OAAO,CAAC,CAAC,CAAC;QAC5B;MACF;MAEAzB,iBAAiB,CAAC1B,IAAI,CAACpB,OAAO,CAAC;MAC/B,IAAI,OAAOA,OAAO,CAACM,YAAY,KAAK,QAAQ,EAAE;QAC5C,IAAIuE,aAAa,GAAG7E,OAAO,CAACC,MAAM;QAClC,OAAOoE,gBAAgB,CAACtE,MAAM,IAAI8E,aAAa,EAAE;UAC/CR,gBAAgB,CAACjD,IAAI,CAAC,IAAI,CAAC;QAC7B;QACA,IAAIiD,gBAAgB,CAACQ,aAAa,CAAC,KAAK,IAAI,EAAE;UAC5CR,gBAAgB,CAACQ,aAAa,CAAC,GAAG,EAAE;QACtC;QACAR,gBAAgB,CAACQ,aAAa,CAAC,CAACzD,IAAI,CAACpB,OAAO,CAAC;MAC/C;IACF;EACF;EAEAuD,aAAa,CAACT,iBAAiB,EAAE4B,aAAa,CAAC;EAC/C,IAAI,CAACtH,mBAAmB,GAAG0F,iBAAiB;EAE5C,KAAK,IAAIjD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwE,gBAAgB,CAACtE,MAAM,EAAEF,CAAC,EAAE,EAAE;IAChD,IAAIwE,gBAAgB,CAACxE,CAAC,CAAC,IAAI,IAAI,EAAE;MAC/BrD,SAAS,CAAC6H,gBAAgB,CAACxE,CAAC,CAAC,EAAE1D,IAAI,CAAC2I,kCAAkC,CAAC;IACzE;EACF;EACA,IAAI,CAACjH,kBAAkB,GAAG,EAAE,CAACkH,MAAM,CAAC,GAAGV,gBAAgB,CAAC;AAC1D,CAAC;;AAEH;AACA;AACA;AACA;AACArH,sBAAsB,CAACE,SAAS,CAAC8D,YAAY,GAC3C,SAASgE,6BAA6BA,CAACC,OAAO,EAAEC,SAAS,EAAEC,SAAS,EAC7BC,WAAW,EAAEC,WAAW,EAAEC,KAAK,EAAE;EACtE;EACA;EACA;EACA;;EAEA,IAAIL,OAAO,CAACE,SAAS,CAAC,IAAI,CAAC,EAAE;IAC3B,MAAM,IAAII,SAAS,CAAC,+CAA+C,GAC7CN,OAAO,CAACE,SAAS,CAAC,CAAC;EAC3C;EACA,IAAIF,OAAO,CAACG,WAAW,CAAC,GAAG,CAAC,EAAE;IAC5B,MAAM,IAAIG,SAAS,CAAC,iDAAiD,GAC/CN,OAAO,CAACG,WAAW,CAAC,CAAC;EAC7C;EAEA,OAAO/I,YAAY,CAACmJ,MAAM,CAACP,OAAO,EAAEC,SAAS,EAAEG,WAAW,EAAEC,KAAK,CAAC;AACpE,CAAC;;AAEH;AACA;AACA;AACA;AACAtI,sBAAsB,CAACE,SAAS,CAACuI,kBAAkB,GACjD,SAASC,oCAAoCA,CAAA,EAAG;EAC9C,KAAK,IAAIzH,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAG,IAAI,CAACkB,kBAAkB,CAACY,MAAM,EAAE,EAAE9B,KAAK,EAAE;IACnE,IAAI+B,OAAO,GAAG,IAAI,CAACb,kBAAkB,CAAClB,KAAK,CAAC;;IAE5C;IACA;IACA;IACA;IACA,IAAIA,KAAK,GAAG,CAAC,GAAG,IAAI,CAACkB,kBAAkB,CAACY,MAAM,EAAE;MAC9C,IAAI4F,WAAW,GAAG,IAAI,CAACxG,kBAAkB,CAAClB,KAAK,GAAG,CAAC,CAAC;MAEpD,IAAI+B,OAAO,CAACI,aAAa,KAAKuF,WAAW,CAACvF,aAAa,EAAE;QACvDJ,OAAO,CAAC4F,mBAAmB,GAAGD,WAAW,CAACtF,eAAe,GAAG,CAAC;QAC7D;MACF;IACF;;IAEA;IACAL,OAAO,CAAC4F,mBAAmB,GAAGC,QAAQ;EACxC;AACF,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA7I,sBAAsB,CAACE,SAAS,CAAC4I,mBAAmB,GAClD,SAASC,qCAAqCA,CAACpF,KAAK,EAAE;EACpD,IAAIG,MAAM,GAAG;IACXV,aAAa,EAAEjE,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,MAAM,CAAC;IACzCN,eAAe,EAAElE,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,QAAQ;EAC9C,CAAC;EAED,IAAI1C,KAAK,GAAG,IAAI,CAAC+C,YAAY,CAC3BF,MAAM,EACN,IAAI,CAAC3B,kBAAkB,EACvB,eAAe,EACf,iBAAiB,EACjBhD,IAAI,CAAC6J,mCAAmC,EACxC7J,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,MAAM,EAAElE,iBAAiB,CAACgC,oBAAoB,CACnE,CAAC;EAED,IAAIR,KAAK,IAAI,CAAC,EAAE;IACd,IAAI+B,OAAO,GAAG,IAAI,CAACb,kBAAkB,CAAClB,KAAK,CAAC;IAE5C,IAAI+B,OAAO,CAACI,aAAa,KAAKU,MAAM,CAACV,aAAa,EAAE;MAClD,IAAIH,MAAM,GAAG9D,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,QAAQ,EAAE,IAAI,CAAC;MACjD,IAAIC,MAAM,KAAK,IAAI,EAAE;QACnBA,MAAM,GAAG,IAAI,CAACP,QAAQ,CAACQ,EAAE,CAACD,MAAM,CAAC;QACjCA,MAAM,GAAG9D,IAAI,CAACgE,gBAAgB,CAAC,IAAI,CAACvC,UAAU,EAAEqC,MAAM,EAAE,IAAI,CAACL,aAAa,CAAC;MAC7E;MACA,IAAIY,IAAI,GAAGrE,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC;MAC7C,IAAIQ,IAAI,KAAK,IAAI,EAAE;QACjBA,IAAI,GAAG,IAAI,CAAChB,MAAM,CAACU,EAAE,CAACM,IAAI,CAAC;MAC7B;MACA,OAAO;QACLP,MAAM,EAAEA,MAAM;QACdW,IAAI,EAAEzE,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,cAAc,EAAE,IAAI,CAAC;QAChDkB,MAAM,EAAE/E,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,gBAAgB,EAAE,IAAI,CAAC;QACpDQ,IAAI,EAAEA;MACR,CAAC;IACH;EACF;EAEA,OAAO;IACLP,MAAM,EAAE,IAAI;IACZW,IAAI,EAAE,IAAI;IACVM,MAAM,EAAE,IAAI;IACZV,IAAI,EAAE;EACR,CAAC;AACH,CAAC;;AAEH;AACA;AACA;AACA;AACAxD,sBAAsB,CAACE,SAAS,CAAC+I,uBAAuB,GACtD,SAASC,8CAA8CA,CAAA,EAAG;EACxD,IAAI,CAAC,IAAI,CAAC1E,cAAc,EAAE;IACxB,OAAO,KAAK;EACd;EACA,OAAO,IAAI,CAACA,cAAc,CAACzB,MAAM,IAAI,IAAI,CAACL,QAAQ,CAACyG,IAAI,CAAC,CAAC,IACvD,CAAC,IAAI,CAAC3E,cAAc,CAAC4E,IAAI,CAAC,UAAUC,EAAE,EAAE;IAAE,OAAOA,EAAE,IAAI,IAAI;EAAE,CAAC,CAAC;AACnE,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACArJ,sBAAsB,CAACE,SAAS,CAACoJ,gBAAgB,GAC/C,SAASC,kCAAkCA,CAAClE,OAAO,EAAEmE,aAAa,EAAE;EAClE,IAAI,CAAC,IAAI,CAAChF,cAAc,EAAE;IACxB,OAAO,IAAI;EACb;EAEA,IAAIvD,KAAK,GAAG,IAAI,CAAC8C,gBAAgB,CAACsB,OAAO,CAAC;EAC1C,IAAIpE,KAAK,IAAI,CAAC,EAAE;IACd,OAAO,IAAI,CAACuD,cAAc,CAACvD,KAAK,CAAC;EACnC;EAEA,IAAIqE,cAAc,GAAGD,OAAO;EAC5B,IAAI,IAAI,CAACzE,UAAU,IAAI,IAAI,EAAE;IAC3B0E,cAAc,GAAGnG,IAAI,CAAC2F,QAAQ,CAAC,IAAI,CAAClE,UAAU,EAAE0E,cAAc,CAAC;EACjE;EAEA,IAAImE,GAAG;EACP,IAAI,IAAI,CAAC7I,UAAU,IAAI,IAAI,KACnB6I,GAAG,GAAGtK,IAAI,CAACuK,QAAQ,CAAC,IAAI,CAAC9I,UAAU,CAAC,CAAC,EAAE;IAC7C;IACA;IACA;IACA;IACA,IAAI+I,cAAc,GAAGrE,cAAc,CAACsE,OAAO,CAAC,YAAY,EAAE,EAAE,CAAC;IAC7D,IAAIH,GAAG,CAACI,MAAM,IAAI,MAAM,IACjB,IAAI,CAACnH,QAAQ,CAAC6C,GAAG,CAACoE,cAAc,CAAC,EAAE;MACxC,OAAO,IAAI,CAACnF,cAAc,CAAC,IAAI,CAAC9B,QAAQ,CAAC8C,OAAO,CAACmE,cAAc,CAAC,CAAC;IACnE;IAEA,IAAI,CAAC,CAACF,GAAG,CAACK,IAAI,IAAIL,GAAG,CAACK,IAAI,IAAI,GAAG,KAC1B,IAAI,CAACpH,QAAQ,CAAC6C,GAAG,CAAC,GAAG,GAAGD,cAAc,CAAC,EAAE;MAC9C,OAAO,IAAI,CAACd,cAAc,CAAC,IAAI,CAAC9B,QAAQ,CAAC8C,OAAO,CAAC,GAAG,GAAGF,cAAc,CAAC,CAAC;IACzE;EACF;;EAEA;EACA;EACA;EACA;EACA,IAAIkE,aAAa,EAAE;IACjB,OAAO,IAAI;EACb,CAAC,MACI;IACH,MAAM,IAAIlI,KAAK,CAAC,GAAG,GAAGgE,cAAc,GAAG,4BAA4B,CAAC;EACtE;AACF,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtF,sBAAsB,CAACE,SAAS,CAAC6J,oBAAoB,GACnD,SAASC,sCAAsCA,CAACrG,KAAK,EAAE;EACrD,IAAIV,MAAM,GAAG9D,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,QAAQ,CAAC;EACzCV,MAAM,GAAG,IAAI,CAACc,gBAAgB,CAACd,MAAM,CAAC;EACtC,IAAIA,MAAM,GAAG,CAAC,EAAE;IACd,OAAO;MACLW,IAAI,EAAE,IAAI;MACVM,MAAM,EAAE,IAAI;MACZG,UAAU,EAAE;IACd,CAAC;EACH;EAEA,IAAIP,MAAM,GAAG;IACXb,MAAM,EAAEA,MAAM;IACdK,YAAY,EAAEnE,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,MAAM,CAAC;IACxCJ,cAAc,EAAEpE,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,QAAQ;EAC7C,CAAC;EAED,IAAI1C,KAAK,GAAG,IAAI,CAAC+C,YAAY,CAC3BF,MAAM,EACN,IAAI,CAAC1B,iBAAiB,EACtB,cAAc,EACd,gBAAgB,EAChBjD,IAAI,CAAC8E,0BAA0B,EAC/B9E,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,MAAM,EAAElE,iBAAiB,CAACgC,oBAAoB,CACnE,CAAC;EAED,IAAIR,KAAK,IAAI,CAAC,EAAE;IACd,IAAI+B,OAAO,GAAG,IAAI,CAACZ,iBAAiB,CAACnB,KAAK,CAAC;IAE3C,IAAI+B,OAAO,CAACC,MAAM,KAAKa,MAAM,CAACb,MAAM,EAAE;MACpC,OAAO;QACLW,IAAI,EAAEzE,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,eAAe,EAAE,IAAI,CAAC;QACjDkB,MAAM,EAAE/E,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,iBAAiB,EAAE,IAAI,CAAC;QACrDqB,UAAU,EAAElF,IAAI,CAAC0E,MAAM,CAACb,OAAO,EAAE,qBAAqB,EAAE,IAAI;MAC9D,CAAC;IACH;EACF;EAEA,OAAO;IACLY,IAAI,EAAE,IAAI;IACVM,MAAM,EAAE,IAAI;IACZG,UAAU,EAAE;EACd,CAAC;AACH,CAAC;AAEHC,OAAO,CAACtE,sBAAsB,GAAGA,sBAAsB;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,wBAAwBA,CAACL,UAAU,EAAEC,aAAa,EAAE;EAC3D,IAAIC,SAAS,GAAGF,UAAU;EAC1B,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;IAClCE,SAAS,GAAGT,IAAI,CAACU,mBAAmB,CAACH,UAAU,CAAC;EAClD;EAEA,IAAI6E,OAAO,GAAGpF,IAAI,CAAC0E,MAAM,CAACjE,SAAS,EAAE,SAAS,CAAC;EAC/C,IAAIE,QAAQ,GAAGX,IAAI,CAAC0E,MAAM,CAACjE,SAAS,EAAE,UAAU,CAAC;EAEjD,IAAI2E,OAAO,IAAI,IAAI,CAACpE,QAAQ,EAAE;IAC5B,MAAM,IAAImB,KAAK,CAAC,uBAAuB,GAAGiD,OAAO,CAAC;EACpD;EAEA,IAAI,CAAC7B,QAAQ,GAAG,IAAIpD,QAAQ,CAAC,CAAC;EAC9B,IAAI,CAACkD,MAAM,GAAG,IAAIlD,QAAQ,CAAC,CAAC;EAE5B,IAAI2K,UAAU,GAAG;IACfrG,IAAI,EAAE,CAAC,CAAC;IACRM,MAAM,EAAE;EACV,CAAC;EACD,IAAI,CAACgG,SAAS,GAAGpK,QAAQ,CAAC6E,GAAG,CAAC,UAAUO,CAAC,EAAE;IACzC,IAAIA,CAAC,CAACuE,GAAG,EAAE;MACT;MACA;MACA,MAAM,IAAInI,KAAK,CAAC,oDAAoD,CAAC;IACvE;IACA,IAAI6I,MAAM,GAAGhL,IAAI,CAAC0E,MAAM,CAACqB,CAAC,EAAE,QAAQ,CAAC;IACrC,IAAIkF,UAAU,GAAGjL,IAAI,CAAC0E,MAAM,CAACsG,MAAM,EAAE,MAAM,CAAC;IAC5C,IAAIE,YAAY,GAAGlL,IAAI,CAAC0E,MAAM,CAACsG,MAAM,EAAE,QAAQ,CAAC;IAEhD,IAAIC,UAAU,GAAGH,UAAU,CAACrG,IAAI,IAC3BwG,UAAU,KAAKH,UAAU,CAACrG,IAAI,IAAIyG,YAAY,GAAGJ,UAAU,CAAC/F,MAAO,EAAE;MACxE,MAAM,IAAI5C,KAAK,CAAC,sDAAsD,CAAC;IACzE;IACA2I,UAAU,GAAGE,MAAM;IAEnB,OAAO;MACLG,eAAe,EAAE;QACf;QACA;QACAlH,aAAa,EAAEgH,UAAU,GAAG,CAAC;QAC7B/G,eAAe,EAAEgH,YAAY,GAAG;MAClC,CAAC;MACDjF,QAAQ,EAAE,IAAI3F,iBAAiB,CAACN,IAAI,CAAC0E,MAAM,CAACqB,CAAC,EAAE,KAAK,CAAC,EAAEvF,aAAa;IACtE,CAAC;EACH,CAAC,CAAC;AACJ;AAEAI,wBAAwB,CAACG,SAAS,GAAGG,MAAM,CAAC8E,MAAM,CAAC1F,iBAAiB,CAACS,SAAS,CAAC;AAC/EH,wBAAwB,CAACG,SAAS,CAACqK,WAAW,GAAG9K,iBAAiB;;AAElE;AACA;AACA;AACAM,wBAAwB,CAACG,SAAS,CAACC,QAAQ,GAAG,CAAC;;AAE/C;AACA;AACA;AACAE,MAAM,CAACC,cAAc,CAACP,wBAAwB,CAACG,SAAS,EAAE,SAAS,EAAE;EACnEO,GAAG,EAAE,SAAAA,CAAA,EAAY;IACf,IAAIgC,OAAO,GAAG,EAAE;IAChB,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACqH,SAAS,CAACnH,MAAM,EAAEF,CAAC,EAAE,EAAE;MAC9C,KAAK,IAAIgE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACqD,SAAS,CAACrH,CAAC,CAAC,CAACuC,QAAQ,CAAC3C,OAAO,CAACM,MAAM,EAAE8D,CAAC,EAAE,EAAE;QAClEpE,OAAO,CAAC2B,IAAI,CAAC,IAAI,CAAC8F,SAAS,CAACrH,CAAC,CAAC,CAACuC,QAAQ,CAAC3C,OAAO,CAACoE,CAAC,CAAC,CAAC;MACrD;IACF;IACA,OAAOpE,OAAO;EAChB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA1C,wBAAwB,CAACG,SAAS,CAAC4I,mBAAmB,GACpD,SAAS0B,4CAA4CA,CAAC7G,KAAK,EAAE;EAC3D,IAAIG,MAAM,GAAG;IACXV,aAAa,EAAEjE,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,MAAM,CAAC;IACzCN,eAAe,EAAElE,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,QAAQ;EAC9C,CAAC;;EAED;EACA;EACA,IAAI8G,YAAY,GAAGpL,YAAY,CAACmJ,MAAM,CAAC1E,MAAM,EAAE,IAAI,CAACoG,SAAS,EAC3D,UAASpG,MAAM,EAAE4G,OAAO,EAAE;IACxB,IAAIC,GAAG,GAAG7G,MAAM,CAACV,aAAa,GAAGsH,OAAO,CAACJ,eAAe,CAAClH,aAAa;IACtE,IAAIuH,GAAG,EAAE;MACP,OAAOA,GAAG;IACZ;IAEA,OAAQ7G,MAAM,CAACT,eAAe,GACtBqH,OAAO,CAACJ,eAAe,CAACjH,eAAe;EACjD,CAAC,CAAC;EACJ,IAAIqH,OAAO,GAAG,IAAI,CAACR,SAAS,CAACO,YAAY,CAAC;EAE1C,IAAI,CAACC,OAAO,EAAE;IACZ,OAAO;MACLzH,MAAM,EAAE,IAAI;MACZW,IAAI,EAAE,IAAI;MACVM,MAAM,EAAE,IAAI;MACZV,IAAI,EAAE;IACR,CAAC;EACH;EAEA,OAAOkH,OAAO,CAACtF,QAAQ,CAAC0D,mBAAmB,CAAC;IAC1ClF,IAAI,EAAEE,MAAM,CAACV,aAAa,IACvBsH,OAAO,CAACJ,eAAe,CAAClH,aAAa,GAAG,CAAC,CAAC;IAC7Cc,MAAM,EAAEJ,MAAM,CAACT,eAAe,IAC3BqH,OAAO,CAACJ,eAAe,CAAClH,aAAa,KAAKU,MAAM,CAACV,aAAa,GAC5DsH,OAAO,CAACJ,eAAe,CAACjH,eAAe,GAAG,CAAC,GAC3C,CAAC,CAAC;IACPuH,IAAI,EAAEjH,KAAK,CAACiH;EACd,CAAC,CAAC;AACJ,CAAC;;AAEH;AACA;AACA;AACA;AACA7K,wBAAwB,CAACG,SAAS,CAAC+I,uBAAuB,GACxD,SAAS4B,gDAAgDA,CAAA,EAAG;EAC1D,OAAO,IAAI,CAACX,SAAS,CAACY,KAAK,CAAC,UAAU5F,CAAC,EAAE;IACvC,OAAOA,CAAC,CAACE,QAAQ,CAAC6D,uBAAuB,CAAC,CAAC;EAC7C,CAAC,CAAC;AACJ,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACAlJ,wBAAwB,CAACG,SAAS,CAACoJ,gBAAgB,GACjD,SAASyB,yCAAyCA,CAAC1F,OAAO,EAAEmE,aAAa,EAAE;EACzE,KAAK,IAAI3G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACqH,SAAS,CAACnH,MAAM,EAAEF,CAAC,EAAE,EAAE;IAC9C,IAAI6H,OAAO,GAAG,IAAI,CAACR,SAAS,CAACrH,CAAC,CAAC;IAE/B,IAAImI,OAAO,GAAGN,OAAO,CAACtF,QAAQ,CAACkE,gBAAgB,CAACjE,OAAO,EAAE,IAAI,CAAC;IAC9D,IAAI2F,OAAO,IAAIA,OAAO,KAAK,EAAE,EAAE;MAC7B,OAAOA,OAAO;IAChB;EACF;EACA,IAAIxB,aAAa,EAAE;IACjB,OAAO,IAAI;EACb,CAAC,MACI;IACH,MAAM,IAAIlI,KAAK,CAAC,GAAG,GAAG+D,OAAO,GAAG,4BAA4B,CAAC;EAC/D;AACF,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAtF,wBAAwB,CAACG,SAAS,CAAC6J,oBAAoB,GACrD,SAASkB,6CAA6CA,CAACtH,KAAK,EAAE;EAC5D,KAAK,IAAId,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACqH,SAAS,CAACnH,MAAM,EAAEF,CAAC,EAAE,EAAE;IAC9C,IAAI6H,OAAO,GAAG,IAAI,CAACR,SAAS,CAACrH,CAAC,CAAC;;IAE/B;IACA;IACA,IAAI6H,OAAO,CAACtF,QAAQ,CAACrB,gBAAgB,CAAC5E,IAAI,CAAC0E,MAAM,CAACF,KAAK,EAAE,QAAQ,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;MAC1E;IACF;IACA,IAAIuH,iBAAiB,GAAGR,OAAO,CAACtF,QAAQ,CAAC2E,oBAAoB,CAACpG,KAAK,CAAC;IACpE,IAAIuH,iBAAiB,EAAE;MACrB,IAAIC,GAAG,GAAG;QACRvH,IAAI,EAAEsH,iBAAiB,CAACtH,IAAI,IACzB8G,OAAO,CAACJ,eAAe,CAAClH,aAAa,GAAG,CAAC,CAAC;QAC7Cc,MAAM,EAAEgH,iBAAiB,CAAChH,MAAM,IAC7BwG,OAAO,CAACJ,eAAe,CAAClH,aAAa,KAAK8H,iBAAiB,CAACtH,IAAI,GAC9D8G,OAAO,CAACJ,eAAe,CAACjH,eAAe,GAAG,CAAC,GAC3C,CAAC;MACR,CAAC;MACD,OAAO8H,GAAG;IACZ;EACF;EAEA,OAAO;IACLvH,IAAI,EAAE,IAAI;IACVM,MAAM,EAAE;EACV,CAAC;AACH,CAAC;;AAEH;AACA;AACA;AACA;AACA;AACAnE,wBAAwB,CAACG,SAAS,CAACQ,cAAc,GAC/C,SAAS0K,sCAAsCA,CAACpK,IAAI,EAAEK,WAAW,EAAE;EACjE,IAAI,CAACjB,mBAAmB,GAAG,EAAE;EAC7B,IAAI,CAACS,kBAAkB,GAAG,EAAE;EAC5B,KAAK,IAAIgC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACqH,SAAS,CAACnH,MAAM,EAAEF,CAAC,EAAE,EAAE;IAC9C,IAAI6H,OAAO,GAAG,IAAI,CAACR,SAAS,CAACrH,CAAC,CAAC;IAC/B,IAAIwI,eAAe,GAAGX,OAAO,CAACtF,QAAQ,CAACjD,kBAAkB;IACzD,KAAK,IAAI0E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwE,eAAe,CAACtI,MAAM,EAAE8D,CAAC,EAAE,EAAE;MAC/C,IAAI7D,OAAO,GAAGqI,eAAe,CAACxE,CAAC,CAAC;MAEhC,IAAI5D,MAAM,GAAGyH,OAAO,CAACtF,QAAQ,CAAC1C,QAAQ,CAACQ,EAAE,CAACF,OAAO,CAACC,MAAM,CAAC;MACzD,IAAGA,MAAM,KAAK,IAAI,EAAE;QAClBA,MAAM,GAAG9D,IAAI,CAACgE,gBAAgB,CAACuH,OAAO,CAACtF,QAAQ,CAACxE,UAAU,EAAEqC,MAAM,EAAE,IAAI,CAACL,aAAa,CAAC;MACzF;MACA,IAAI,CAACF,QAAQ,CAAC4I,GAAG,CAACrI,MAAM,CAAC;MACzBA,MAAM,GAAG,IAAI,CAACP,QAAQ,CAAC8C,OAAO,CAACvC,MAAM,CAAC;MAEtC,IAAIO,IAAI,GAAG,IAAI;MACf,IAAIR,OAAO,CAACQ,IAAI,EAAE;QAChBA,IAAI,GAAGkH,OAAO,CAACtF,QAAQ,CAAC5C,MAAM,CAACU,EAAE,CAACF,OAAO,CAACQ,IAAI,CAAC;QAC/C,IAAI,CAAChB,MAAM,CAAC8I,GAAG,CAAC9H,IAAI,CAAC;QACrBA,IAAI,GAAG,IAAI,CAAChB,MAAM,CAACgD,OAAO,CAAChC,IAAI,CAAC;MAClC;;MAEA;MACA;MACA;MACA;MACA,IAAI+H,eAAe,GAAG;QACpBtI,MAAM,EAAEA,MAAM;QACdG,aAAa,EAAEJ,OAAO,CAACI,aAAa,IACjCsH,OAAO,CAACJ,eAAe,CAAClH,aAAa,GAAG,CAAC,CAAC;QAC7CC,eAAe,EAAEL,OAAO,CAACK,eAAe,IACrCqH,OAAO,CAACJ,eAAe,CAAClH,aAAa,KAAKJ,OAAO,CAACI,aAAa,GAC9DsH,OAAO,CAACJ,eAAe,CAACjH,eAAe,GAAG,CAAC,GAC3C,CAAC,CAAC;QACNC,YAAY,EAAEN,OAAO,CAACM,YAAY;QAClCC,cAAc,EAAEP,OAAO,CAACO,cAAc;QACtCC,IAAI,EAAEA;MACR,CAAC;MAED,IAAI,CAACpD,mBAAmB,CAACgE,IAAI,CAACmH,eAAe,CAAC;MAC9C,IAAI,OAAOA,eAAe,CAACjI,YAAY,KAAK,QAAQ,EAAE;QACpD,IAAI,CAACzC,kBAAkB,CAACuD,IAAI,CAACmH,eAAe,CAAC;MAC/C;IACF;EACF;EAEA/L,SAAS,CAAC,IAAI,CAACY,mBAAmB,EAAEjB,IAAI,CAAC6J,mCAAmC,CAAC;EAC7ExJ,SAAS,CAAC,IAAI,CAACqB,kBAAkB,EAAE1B,IAAI,CAAC8E,0BAA0B,CAAC;AACrE,CAAC;AAEHK,OAAO,CAACvE,wBAAwB,GAAGA,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}